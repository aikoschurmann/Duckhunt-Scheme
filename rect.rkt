(define (rect2D::new location width height)
  (define (rect2D::location! args)
    (let ((loc (car args)))
      (set! location loc)))
  (define (rect2D::x! args)
    (let ((x (car args)))
      (location 'point2D::x! x)))
  (define (rect2D::y! args)
    (let ((y(car args)))
      (location 'point2D::y! y)))
  (define (rect2D::width! args)
    (let ((new-width (car args)))
      (set! width new-width)))
  (define (rect2D::height! args)
    (let ((new-height (car args)))
      (set! height new-height)))
  (define (rect2D::collision? args)
    (let ((point (car args)))
        (if (and (>= (point 'point2D::x) (location 'point2D::x))
                 (<= (point 'point2D::x) (+ (location 'point2D::x) width))
                 (>= (point 'point2D::y) (location 'point2D::y))
                 (<= (point 'point2D::Y) (+ (location 'point2D::y) height)))
                 #t
                 #f)))
  (define (dispatch-rect2D message . args)
    (cond ((eq? message 'rect2D::x) (location 'point2D::x))
          ((eq? message 'rect2D::y) (location 'point2D::y))
          ((eq? message 'rect2D::location) location)
          ((eq? message 'rect2D::width) width)
          ((eq? message 'rect2D::height) height)
          ((eq? message 'rect2D::location!) (rect2D::location! args))
          ((eq? message 'rect2D::x!) (rect2D::x! args))
          ((eq? message 'rect2D::y!) (rect2D::y! args))
          ((eq? message 'rect2D::width!) (rect2D::width! args))
          ((eq? message 'rect2D::height!) (rect2D::height! args))
          ((eq? message 'rect2D::collision?) (rect2D::collision? args))
          (else (error "rect2D ADT unkown message" message))))
  dispatch-rect2D)